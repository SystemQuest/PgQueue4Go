// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: schema.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSchemaVersion = `-- name: GetSchemaVersion :one
SELECT version 
FROM pgqueue_schema_version 
ORDER BY version DESC 
LIMIT 1
`

func (q *Queries) GetSchemaVersion(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, getSchemaVersion)
	var version int32
	err := row.Scan(&version)
	return version, err
}

const hasUpdatedColumn = `-- name: HasUpdatedColumn :one
SELECT EXISTS (
    SELECT 1 
    FROM information_schema.columns 
    WHERE table_schema = current_schema()
    AND table_name = $1
    AND column_name = $2
)
`

type HasUpdatedColumnParams struct {
	TableName  interface{} `db:"table_name" json:"table_name"`
	ColumnName interface{} `db:"column_name" json:"column_name"`
}

func (q *Queries) HasUpdatedColumn(ctx context.Context, arg HasUpdatedColumnParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasUpdatedColumn, arg.TableName, arg.ColumnName)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const insertSchemaVersion = `-- name: InsertSchemaVersion :exec
INSERT INTO pgqueue_schema_version (version, description) 
VALUES ($1, $2)
`

type InsertSchemaVersionParams struct {
	Version     int32       `db:"version" json:"version"`
	Description pgtype.Text `db:"description" json:"description"`
}

func (q *Queries) InsertSchemaVersion(ctx context.Context, arg InsertSchemaVersionParams) error {
	_, err := q.db.Exec(ctx, insertSchemaVersion, arg.Version, arg.Description)
	return err
}
