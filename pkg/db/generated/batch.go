// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package generated

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const enqueueJobBatch = `-- name: EnqueueJobBatch :batchexec
INSERT INTO pgqueue_jobs (priority, entrypoint, payload, status)
VALUES ($1, $2, $3, 'queued')
`

type EnqueueJobBatchBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type EnqueueJobBatchParams struct {
	Priority   int32  `db:"priority" json:"priority"`
	Entrypoint string `db:"entrypoint" json:"entrypoint"`
	Payload    []byte `db:"payload" json:"payload"`
}

func (q *Queries) EnqueueJobBatch(ctx context.Context, arg []EnqueueJobBatchParams) *EnqueueJobBatchBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Priority,
			a.Entrypoint,
			a.Payload,
		}
		batch.Queue(enqueueJobBatch, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &EnqueueJobBatchBatchResults{br, len(arg), false}
}

func (b *EnqueueJobBatchBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *EnqueueJobBatchBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
