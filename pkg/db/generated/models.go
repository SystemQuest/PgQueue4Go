// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package generated

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type QueueStatus string

const (
	QueueStatusQueued QueueStatus = "queued"
	QueueStatusPicked QueueStatus = "picked"
)

func (e *QueueStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QueueStatus(s)
	case string:
		*e = QueueStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for QueueStatus: %T", src)
	}
	return nil
}

type NullQueueStatus struct {
	QueueStatus QueueStatus `json:"queue_status"`
	Valid       bool        `json:"valid"` // Valid is true if QueueStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQueueStatus) Scan(value interface{}) error {
	if value == nil {
		ns.QueueStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QueueStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQueueStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QueueStatus), nil
}

type StatisticsStatus string

const (
	StatisticsStatusException  StatisticsStatus = "exception"
	StatisticsStatusSuccessful StatisticsStatus = "successful"
)

func (e *StatisticsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StatisticsStatus(s)
	case string:
		*e = StatisticsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for StatisticsStatus: %T", src)
	}
	return nil
}

type NullStatisticsStatus struct {
	StatisticsStatus StatisticsStatus `json:"statistics_status"`
	Valid            bool             `json:"valid"` // Valid is true if StatisticsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatisticsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.StatisticsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StatisticsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatisticsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StatisticsStatus), nil
}

type PgqueueJobs struct {
	ID         int32              `db:"id" json:"id"`
	Priority   int32              `db:"priority" json:"priority"`
	Created    pgtype.Timestamptz `db:"created" json:"created"`
	Updated    pgtype.Timestamptz `db:"updated" json:"updated"`
	Status     QueueStatus        `db:"status" json:"status"`
	Entrypoint string             `db:"entrypoint" json:"entrypoint"`
	Payload    []byte             `db:"payload" json:"payload"`
}

type PgqueueSchemaVersion struct {
	Version     int32              `db:"version" json:"version"`
	InstalledAt pgtype.Timestamptz `db:"installed_at" json:"installed_at"`
	Description pgtype.Text        `db:"description" json:"description"`
}

type PgqueueStatistics struct {
	ID          int32              `db:"id" json:"id"`
	Created     pgtype.Timestamptz `db:"created" json:"created"`
	Count       int64              `db:"count" json:"count"`
	Priority    int32              `db:"priority" json:"priority"`
	TimeInQueue pgtype.Interval    `db:"time_in_queue" json:"time_in_queue"`
	Status      StatisticsStatus   `db:"status" json:"status"`
	Entrypoint  string             `db:"entrypoint" json:"entrypoint"`
}
